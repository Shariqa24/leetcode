#include <iostream>
#include <vector>
#include <algorithm>
#include <numeric>

using namespace std;
bool isPossible(vector<int>& arr,int n,int m,int maxAllowedTime){
    int painters=1,time=0;
 for(int i=0;i<n;i++){
    if(arr[i]>maxAllowedTime) return false;
    if(time+arr[i]<=maxAllowedTime){
        time+=arr[i];}
        else{
            painters++;
            time=arr[i];
            if(painters>m) return false;
        }
    }return true;
 }
int paintersPartition(vector<int>& arr,int n,int m){
    int st=*max_element(arr.begin(),arr.end());
    int end=accumulate(arr.begin(),arr.end(),0);
    int ans =-1;
while(st<=end){
    int mid=st+(end-st)/2;
    if(isPossible(arr,n,m,mid)){
        ans=mid;
        end=mid-1;
    }else{
        st=mid+1;
    }
    }return ans;
}
int main() {
   vector<int>arr={40,30,10,20};
   int n=arr.size();
   int m=2;

   cout<<paintersPartition(arr,n,m)<<endl;
   return 0;
}
